---
title: "General notes on the ICDDPS-4 contribution"

execute: 
  echo: false
  warning: false
---

## TODO

1. Slide outlines

## Slide outline

1. Intro to why we are doing what we are doing
    - Goal of learning is
    - Time-of-flight predictors are useful 
    - Latent variable models 
2. Dataset 
    - $\#$ pulses and description of them 
        - Lengths
    - Machine parameters 
    - Profile statistics 
3. Model
    - Architecture 
    - Loss function 
4. Results 
5. Results 
6. Results 
7. Summary/Conclusion 


## Dataset 

- 6456 Pulses from ASDEX-Upgrade 
    - From 30002 to 41570
    - 70\% H-mode, 30\% L-mode
    - 70\% Deterium only, 23\% with impurities (of which 50\% are N2 seeded)
    - 10\% disrupt (662 labeled) 
        

```{python}
import pandas as pd 
from IPython.display import Markdown
import numpy as np 
import os 
import matplotlib.pyplot as plt 
if os.getenv('PLOTSTYLE') is not None: 
    plt.style.use(os.getenv('PLOTSTYLE'))

['Unnamed: 0', 'shotno', 'program', 'clearance', 'datum', 'time', 'leader', 'konf_il', 'konf_al', 'konf_snu', 'konf_sno', 'konf_dn', 'typ', 'useful', 'b_hmod', 'b_lmod', 'b_imprh', 'b_itb', 'b_blim', 'b_dlim', 'b_disb', 'b_disr', 'b_dise', 'b_vdeo', 'b_vdeu', 'b_nobd', 'b_res', 'b_fail', 'b_stable', 'b_sweep', 'b_cdh', 'b_run', 'vessel', 'coat', 'coatdate', 'proposal', 'yag', 'lagereg', 'lagecom1', 'lagecom2', 'formreg', 'formcom1', 'formcom2', 'remarks', 'flatb', 'flate', 'flatm', 'ip', 'ne', 'nediag', 'bt', 'q95', 'kappa', 'delrob', 'delrunt', 'disr', 'killergas', 'impspez', 'imptime', 'neutr', 'kryop', 'glowtime', 'ioh', 'roh', 'gas_h', 'gas_d', 'gas_he', 'gas_ne', 'gas_ar', 'gas_n2', 'gas_kr', 'gas_xe', 'gas_cd4', 'gas_other', 'valve_1', 'valve_2', 'valve_3', 'valve_4', 'valve_5', 'valve_6', 'valve_7', 'valve_8', 'valve_9', 'valve_10', 'valve_11', 'valve_12', 'valve_13', 'valve_14', 'valve_15', 'valve_16', 'valve_17', 'valve_18', 'valve_19', 'valve_20', 'valve_21', 'valve_22', 'erstfh', 'erstfb', 'erstfg', 'gasvalv', 'nbi1l', 'nbi1sp', 'nbi1g', 'nbi1b', 'nbi1e', 'nbi2l', 'nbi2sp', 'nbi2g', 'nbi2b', 'nbi2e', 'nbi3l', 'nbi3sp', 'nbi3g', 'nbi3b', 'nbi3e', 'nbi4l', 'nbi4sp', 'nbi4g', 'nbi4b', 'nbi4e', 'nbi5l', 'nbi5sp', 'nbi5g', 'nbi5b', 'nbi5e', 'nbi6l', 'nbi6sp', 'nbi6g', 'nbi6b', 'nbi6e', 'nbi7l', 'nbi7sp', 'nbi7g', 'nbi7b', 'nbi7e', 'nbi8l', 'nbi8sp', 'nbi8g', 'nbi8b', 'nbi8e', 'ecrh1l', 'ecrh1f', 'e1m', 'ecrh1b', 'ecrh1e', 'ecrh2l', 'ecrh2f', 'e2m', 'ecrh2b', 'ecrh2e', 'ecrh3l', 'ecrh3f', 'e3m', 'ecrh3b', 'ecrh3e', 'ecrh4l', 'ecrh4f', 'e4m', 'ecrh4b', 'ecrh4e', 'ecrh5l', 'ecrh5f', 'e5m', 'ecrh5b', 'ecrh5e', 'ecrh6l', 'ecrh6f', 'e6m', 'ecrh6b', 'ecrh6e', 'ecrh7l', 'ecrh7f', 'e7m', 'ecrh7b', 'ecrh7e', 'ecrh8l', 'ecrh8f', 'e8m', 'ecrh8b', 'ecrh8e', 'icrh1l', 'icrh1f', 'i1m', 'icrh1b', 'icrh1e', 'icrh2l', 'icrh2f', 'i2m', 'icrh2b', 'icrh2e', 'icrh3l', 'icrh3f', 'i3m', 'icrh3b', 'icrh3e', 'icrh4l', 'icrh4f', 'i4m', 'icrh4b', 'icrh4e', 'nbi4m', 'icrh4m', 'ecrh4m', 'nbb1b', 'nbb1e', 'pheattot', 'status', 'notice', 'upddate', 'cryoreg', 'programdir', 'crossval', 'crosstyp', 'recipe', 'saddlecr', 'saddleip', 'saddleci']

pulses_df = pd.read_csv('./journal-all-raw-aug-pulses.csv')
pos = "b'HMOD'"
pulses_df['b_hmod'] = np.where(pulses_df['b_hmod'] == pos, 'HMOD', 0)
pos = "b'LMOD'"
pulses_df['b_lmod'] = np.where(pulses_df['b_lmod'] == pos, 'LMOD', 0)

# Markdown(pulses_df[['b_hmod', 'b_lmod']].value_counts().to_markdown())
# - 4502 H-mode, 1120 L-mode, 298 Both, 536 Unlabeled
# Markdown(pulses_df[['b_disr']].value_counts().to_markdown())

# Markdown(pulses_df[['gas_ne', 'gas_ar', 'gas_n2', 'gas_kr', 'gas_xe', 'gas_cd4', 'gas_other']].value_counts().to_markdown())
# - 4643 D only, 1486 with impurities (851 D + N2, 131 D + Argon + N2, ...), 150 H + D, 126 D + Helium, ... 

``` 

```{python}
fig, axs = plt.subplots(figsize=(5, 5))

plot_df = pulses_df[pulses_df['bt'] != 0.0]
plt.scatter(plot_df['bt'], plot_df['ip']*1e-6, edgecolor=(0, 0, 0))
plt.xlim(-3.5, 3.5)
plt.ylim(-1.5, 1.5)
plt.xlabel('$B_T$ [T]')
plt.ylabel('$I_P$ [MA]')

axins = axs.inset_axes([0.2, 0.1, 0.47, 0.47])
axins.scatter(plot_df['bt'], plot_df['ip']*1e-6,  edgecolor=(0, 0, 0))
x1, x2 = (-3.3, -1.3)
y1, y2 = 0.2, 1.4
axins.set_xlim(x1, x2)
axins.set_ylim(y1, y2)

axs.indicate_inset_zoom(axins, edgecolor="black")
plt.show()
``` 


```{python}

from helper_functions import get_pulse_dict, get_allas_connection

conn = get_allas_connection()

list_objects = conn.get_container('AUG_PULSES')[1]
print('Number of Pulses', len(list_objects))

print(list_objects[-1]['name'])
for obj in list_objects: 
    shot_number = obj['name']

    break 

pulse_dict = get_pulse_dict(shot_number, conn)

# print(pulse_dict['journal'])


```
