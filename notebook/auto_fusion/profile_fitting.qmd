---
title: "Profile Fitting given time windows and elm timings"

execute: 
  echo: false
  warning: false
---


Assuming we have time windows $[t_1, t_2]$ and corresponding $t_\text{ELM}\text{s}$ within each window, we can identify measurements that fall between $75-99%$ of the ELM cycle.

```{python}
import os 
import numpy as np
from helper_functions import get_allas_connection, get_dict_params
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec
from physics_functions import get_elm_timings_from_pulse_dict, p_lh_threshold_martin_scaling_from_pulse_dict, find_steady_state_windows
conn = get_allas_connection()
# raw_dir = '/home/adam/ENR_Sven/moxie/data/raw/RAW_JET_PULSES'
raw_dir = '/home/kitadam/ENR_Sven/moxie/data/raw/RAW_JET_PULSES'

# rel_dir = '/home/kitadam/ENR_Sven/supervised_learning_jetpdb/data/jet-all-full.csv'
# jet_pdb_all = pd.read_csv(rel_dir)
shot_list = [fname for fname in os.listdir(raw_dir)]
import random 

random.seed(4)
if os.getenv('PLOTSTYLE') is not None: 
    plt.style.use(os.getenv('PLOTSTYLE'))

machine_param_signals = ['efit/Rgeo','efit/k', 'efit/ahor', 'efit/delRoben', 'efit/delRuntn', 'efit/Vol', 'gas/D_tot', 'magn/IpiFP', 'magn/q95',  'magn/BTF', 'power/PNBI_TOT', 'power/P_OH', 'power/PICR_TOT']
global_param_signals = ['bolo/topi', 'ehtr/wdia', 'kg1l/lad3'] 
elm_param_signals = ['edg8/tbeo', 'edg8/tbei']
hrts_signals = ['hrts/ne', 'hrts/Te', 'hrts/radius']

diagnostic_signal_names = list(set(machine_param_signals + global_param_signals + elm_param_signals + hrts_signals))

sample_shot_nums, sample_shot_dicts = [], []
for idx in random.sample(range(len(shot_list)), len(shot_list)): 
    if len(sample_shot_nums) == 9: 
        break 
    sample_shot = shot_list[idx]
    shot_dict = get_dict_params(sample_shot, diagnostic_signal_names, conn)
    if  shot_dict is not None: 
        sample_shot_dicts.append(shot_dict)
        sample_shot_nums.append(sample_shot)
    break 
```

```{python}

for k, (shot_number, example_dict) in enumerate(zip(sample_shot_nums, sample_shot_dicts)): 
    break 



```