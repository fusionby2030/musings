---
title: "Profile Fitting given time windows and elm timings"

execute: 
  echo: false
  warning: false
---



```{python}
import os 
import numpy as np
from helper_functions import get_allas_connection, get_dict_params
import matplotlib.pyplot as plt 
import matplotlib.gridspec as gridspec
from physics_functions import get_elm_timings_from_pulse_dict, p_lh_threshold_martin_scaling_from_pulse_dict, find_steady_state_windows
conn = get_allas_connection()
# raw_dir = '/home/adam/ENR_Sven/moxie/data/raw/RAW_JET_PULSES'
raw_dir = '/home/kitadam/ENR_Sven/moxie/data/raw/RAW_JET_PULSES'

# rel_dir = '/home/kitadam/ENR_Sven/supervised_learning_jetpdb/data/jet-all-full.csv'
# jet_pdb_all = pd.read_csv(rel_dir)
shot_list = [fname for fname in os.listdir(raw_dir)]
import random 

random.seed(4)
if os.getenv('PLOTSTYLE') is not None: 
    plt.style.use(os.getenv('PLOTSTYLE'))

machine_param_signals = ['efit/Rgeo','efit/k', 'efit/ahor', 'efit/delRoben', 'efit/delRuntn', 'efit/Vol', 'gas/D_tot', 'magn/IpiFP', 'magn/q95',  'magn/BTF', 'power/PNBI_TOT', 'power/P_OH', 'power/PICR_TOT']
global_param_signals = ['bolo/topi', 'ehtr/wdia', 'kg1l/lad3'] 
elm_param_signals = ['edg8/tbeo', 'edg8/tbei']
hrts_signals = ['hrts/ne', 'hrts/Te', 'hrts/radius']

diagnostic_signal_names = list(set(machine_param_signals + global_param_signals + elm_param_signals + hrts_signals))

sample_shot_nums, sample_shot_dicts = [], []
for idx in random.sample(range(len(shot_list)), len(shot_list)): 
    if len(sample_shot_nums) == 9: 
        break 
    sample_shot = shot_list[idx]
    shot_dict = get_dict_params(sample_shot, diagnostic_signal_names, conn)
    if  shot_dict is not None: 
        sample_shot_dicts.append(shot_dict)
        sample_shot_nums.append(sample_shot)
    break 
```

Assuming we have time windows $[t_1, t_2]$ and corresponding $t_\text{ELM}\text{s}$ within each window, we can identify measurements that fall between $75-99\%$ of the ELM cycle.

```{python}

for k, (shot_number, example_dict) in enumerate(zip(sample_shot_nums, sample_shot_dicts)): 
    break 

t_window_steady_states, elm_timings_per_window, (t_start_hmode, t_end_hmode) = get_elm_timings_from_pulse_dict(example_dict)

print(len(t_window_steady_states))
for n, ((t_beg, t_end), elm_timings) in enumerate(zip(t_window_steady_states, elm_timings_per_window)): 
    hrts_time, ne, te, radius = example_dict['hrts/ne']['time'], example_dict['hrts/ne']['data'], example_dict['hrts/Te']['data'], example_dict['hrts/radius']['data']
    if len(elm_timings) <= 1: 
        continue 
    _window = np.logical_and(hrts_time > t_beg, hrts_time < t_end)
    _time, _ne, _te, _radius = hrts_time[_window], ne[_window], te[_window], radius[_window]

    elm_fracs = np.zeros_like(_time) - 1
    for t_idx, t_meas in enumerate(_time):
        closest_elm_idx = np.argmin(np.abs(elm_timings - t_meas))
        closest_elm_t = elm_timings[closest_elm_idx]

        if closest_elm_idx+1 == len(elm_timings): 
            continue 
        elif t_meas < elm_timings[0] or t_meas > elm_timings[-1]:
            continue 
        elif t_meas < closest_elm_t: 
            t_next_elm = closest_elm_t
            t_prev_elm = elm_timings[closest_elm_idx-1]
        
        elif t_meas > closest_elm_t: 
            t_prev_elm = closest_elm_t 
            t_next_elm = elm_timings[closest_elm_idx + 1]
        
        if (t_next_elm - t_prev_elm) <= 0.005 or (t_next_elm - t_meas) <= 0.001: 
            continue 
        elm_frac = (t_meas - t_prev_elm) / (t_next_elm - t_prev_elm)
        elm_fracs[t_idx] = elm_frac
    ped_top = np.logical_and(elm_fracs < 0.98, elm_fracs > 0.70)
    tbeo_time, tbeo_data = example_dict['edg8/tbeo']['time'], example_dict['edg8/tbeo']['data']
    tbeo_bool = np.logical_and(tbeo_time > t_beg, tbeo_time < t_end)

    _mean_density = np.mean(_ne, axis=0)
    print(_mean_density.shape)
    above_mean = _ne[:, :-10] > _mean_density[:-10]
    print(above_mean.sum(-1), (above_mean.sum(-1) > 20).sum())
    idx_above_mean = (above_mean.sum(-1) > 20)
    markers = ['*' if idx else '.' for idx in idx_above_mean]
    fig, axs = plt.subplots(2, 1)
    axs[0].plot(tbeo_time[tbeo_bool], tbeo_data[tbeo_bool], color='salmon')
    axs[0].vlines(_time, 0, tbeo_data[tbeo_bool].mean() + tbeo_data[tbeo_bool].std(), color='grey', ls='--')
    axs[0].vlines(elm_timings, tbeo_data[tbeo_bool].mean() - tbeo_data[tbeo_bool].std(), tbeo_data[tbeo_bool].mean() +2*tbeo_data[tbeo_bool].std(), color='black')
    # axs[0].vlines(_time[ped_top], 0, tbeo_data[tbeo_bool].mean(), color='red', zorder=20)
    for i in range(len(_ne)): 
        axs[1].scatter(_radius[i], _ne[i], color='grey', alpha=0.3, marker=markers[i])
    # axs[1].scatter(_radius[ped_top], _ne[ped_top], color='red')
    for t_idx, bool_val in enumerate(ped_top): 
        if bool_val: 
            marker = '*' if idx_above_mean[t_idx] else '.'
            coll = axs[1].scatter(_radius[t_idx], _ne[t_idx], marker=marker)
            axs[0].vlines(_time[t_idx], 0, tbeo_data[tbeo_bool].mean() +tbeo_data[tbeo_bool].std(), zorder=20, color=coll.get_facecolor())

    plt.show()

# print(example_dict['hrts/radius']['data'][0])
```

traditionally, one would scope out those that are between the elm cycle, but I suggest a prior belief that the profiles are at the PB boundrary, i.e., at or near the max values for 0.5 <= Psi <= 0.75 given in the set, then checking for ELM percentages that allign. 