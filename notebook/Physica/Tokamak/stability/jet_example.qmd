---
title: "JET stability approximation example"

execute: 
  echo: false
  warning: false
---

JET is a bit more tricky, as we don't have a high temporal resolution (20Hz), nor spatial resolution (63 points across all flux surfaces).

```{python}
import os 
import os 
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt 

if os.getenv('PLOTSTYLE') is not None: 
    plt.style.use(os.getenv('PLOTSTYLE'))
RED = "#dd3015"
GREEN = "#489A8C"
DARK = "#1C2C22"
GOLD = "#F87D16"
WHITE = "#FFFFFF"
BLUE = "#2E6C96"

mpl.rcParams['axes.prop_cycle'] = mpl.cycler(color=[RED, GREEN, DARK, GOLD, WHITE, BLUE]) 
from helper_functions import get_allas_connection, get_pulse_dict, map_pulse_dict_to_numpy_arrays
from physics_functions import calculate_boostrap_current, find_j_max_from_boostrap_current, calculate_alpha
conn = get_allas_connection()
```

```{python}
shot_num = 91752
pulse_dict = get_pulse_dict(shot_num, conn, '2005083-JET_PULSE_DICTS')
# ne, te, radii, times = [pulse_dict['profiles'][key] for key in ['ne', 'Te', 'radius', 'time']]
# pe = ne*te*(1.602e-19) 

profiles, mps, radii, times, mp_names = map_pulse_dict_to_numpy_arrays(pulse_dict)
ne, te = profiles[:, 0], profiles[:, 1]
pe = ne*te*(1.602e-19) 
colors = [(t - times[0] )/ (times[-1] - times[0]) for t in times]
colors_t = [(c, 0.5, 0.5) for c in colors]

```

```{python}
X, Y = np.meshgrid(radii[0], times)
fig, ax = plt.subplots(2, 3, subplot_kw={"projection": "3d"}, figsize=(20, 10))

surf = ax[0, 0].plot_surface(X, Y, 1e-20*ne, cmap=mpl.cm.Spectral_r, linewidth=0)
surf = ax[0, 1].plot_surface(X, Y, (1e-4*te), cmap=mpl.cm.Spectral_r, linewidth=0)
surf = ax[0, 2].plot_surface(X, Y, pe / 1000.0, cmap=mpl.cm.Spectral_r, linewidth=0)
# for a in ax: 
#     a.set_xlabel(r'$\rho$', labelpad=10.0)
#     a.set_ylabel('time (s)', labelpad=10.0)

ax[0, 0].set_title('$n_e$ ($10^{20}$ m$^{-3}$)', y=0.98)
ax[0, 1].set_title('$T_e$ (keV)', y=0.98)
ax[0, 2].set_title('$P_e$ (kPa)', y=0.98)

boostrap_currents = np.zeros_like(ne)
pressure_gradients = np.zeros_like(ne)
jb_maxes, alpha_maxes =  np.zeros_like(times), np.zeros_like(times)
for n, idx in enumerate(times): 
    ahor = mps[n, mp_names.index('ahor')]
    q95 =  abs(mps[n, mp_names.index('q95')])
    rgeo =  mps[n, mp_names.index('Rgeo')]
    bt = abs(mps[n, mp_names.index('BTF')])
    vp = abs(mps[n, mp_names.index('Vol')])

    boostrap_current_approx = calculate_boostrap_current(pe[n], te[n], ne[n], radii[n], rgeo, ahor, q95, bt)
    # pressure_gradient = -np.gradient(pe[n])
    alpha_gradient = calculate_alpha(pe[n], radii[n], vp, rgeo)
    boostrap_currents[n] = boostrap_current_approx
    pressure_gradients[n] = alpha_gradient
    max_jb, rad_max_jb, index_max_jb = find_j_max_from_boostrap_current(boostrap_current_approx, radii[n])
    jb_maxes[n] = max_jb / np.mean(boostrap_current_approx[~np.isnan(boostrap_current_approx)])
    alpha, rho_alpha, p_alpha = find_j_max_from_boostrap_current(alpha_gradient, radii[n])
    alpha_maxes[n] = alpha

surf = ax[1, 0].plot_surface(X, Y, boostrap_currents, cmap=mpl.cm.Spectral_r, linewidth=0)
surf = ax[1, 1].plot_surface(X, Y, pressure_gradients, cmap=mpl.cm.Spectral_r, linewidth=0)

for a in ax.ravel(): 
    a.set_xlabel(r'$\rho$', labelpad=10.0)
    a.set_ylabel('time (s)', labelpad=10.0)

# print(jb_maxes.shape, jb_maxes)
ax[1, 0].set_title('$j_B$ [MA]', y=0.98)
ax[1, 1].set_title(r'$\nabla p_e$ (kPa)', y=0.98)

ax[1, 2].scatter(alpha_maxes, times, jb_maxes,  c=colors_t)
ax[1, 2].set_xlabel('$j_B$ max')
ax[1, 2].set_zlabel(r'$\nabla p_e$ max (kPa)')

fig.suptitle(f'JET {shot_num}', y=0.99)
fig.subplots_adjust(wspace=0.01)
plt.show()
plt.show()
```


```{python}
from matplotlib.gridspec import GridSpec
fig = plt.figure(figsize=(20, 10)) 

gs = GridSpec(2, 2, width_ratios=[2, 1])
jb_ax = fig.add_subplot(gs[0, 0])
alpha_ax = fig.add_subplot(gs[1, 0])
both_ax = fig.add_subplot(gs[:, 1])
# hull = np.argsort(jb_maxes)
both_ax.scatter(alpha_maxes, jb_maxes, c=colors_t)
jb_ax.scatter(times, jb_maxes, c=colors_t)
alpha_ax.scatter(times, alpha_maxes, c=colors_t)

jb_ax.set_ylabel('$j_B$ max / avg J_B')
both_ax.set_ylabel('$j_B$ max avg J_B')
alpha_ax.set_ylabel(r'$\alpha$ max (kPa)')
both_ax.set_xlabel(r'$\alpha$ max (kPa)')

plt.show()
```